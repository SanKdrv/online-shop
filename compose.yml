services:
#  frontend:
#    env_file: .env.dev
#    build:
#      context: ./frontend
#      args:
#        NGINX_CONF: ${NGINX_CONF}
#    ports:
#      - '80:80'
#      - "443:443"
#    volumes:
#      - ./frontend/ssl:/etc/nginx/ssl

  backend:
    env_file:
      - .env.dev
    build:
      context: ./backend
      args:
        CONFIG: ${CONFIG}
    ports:
      - '8082:8082'
      - '8443:8443'
    volumes:
      - ./frontend/ssl:/etc/nginx/ssl
    depends_on:
      db:
        condition: service_healthy
#    environment:
#      - DB_HOST=${POSTGRES_HOST}
#      - DB_PORT=${POSTGRES_PORT}
#      - DB_USER=${POSTGRES_USERNAME}
#      - DB_PASSWORD=${POSTGRES_PASSWORD}
#      - DB_NAME=${POSTGRES_DBNAME}
#      - DB_SSLMODE=${POSTGRES_SSLMODE}

  db:
    restart: always
    image: postgres:latest
    volumes:
      - ./.database/postgres/data:/var/lib/postgresql/data
    ports:
      - '${PC_POSTGRES_PORT}:${POSTGRES_PORT}'
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DBNAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5


#  docker-compose --env-file .env up --build          // local
#  docker-compose --env-file .env.prod up --build     // prod
